{"version":3,"sources":["../src/index.js"],"names":["movieGlob","DEFAULT_GLOB","source","process","cwd","concurrentRequests","DEFAULT_CONCURRENT_REQUESTS","apiKey","config","get","debug","TypeError","Array","isArray","omdb","getMovieData","createMovieDataGetter","then","files","length","concurrency","results","groupBy","mapValues","value","key","map","saveKey","file","movieInfo","path","name","byId","title","info","Response","err","code","Promise","reject","state","catch","reason","join","set"],"mappings":";;;;;;;;kBAkDe,UAAU,EAACA,YAAYC,YAAb,EAA2BC,SAASC,QAAQC,GAAR,EAApC,EAAmDC,qBAAqBC,2BAAxE,EAAqGC,SAASC,OAAOC,GAAP,CAAW,QAAX,CAA9G,KAAsI,EAAhJ,EAAoJ;AACjKC,QAAM,sBAAN,EAA8B;AAC5BV,aAD4B;AAE5BE,UAF4B;AAG5BG;AAH4B,GAA9B;;AAMA,MAAI,OAAOA,kBAAP,KAA8B,QAAlC,EAA4C;AAC1C,UAAM,IAAIM,SAAJ,CAAc,qCAAd,CAAN;AACD;;AAED,MAAI,OAAOT,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,UAAM,IAAIS,SAAJ,CAAc,yBAAd,CAAN;AACD;;AAED,MAAI,OAAOX,SAAP,KAAqB,QAArB,IAAiC,CAACY,MAAMC,OAAN,CAAcb,SAAd,CAAtC,EAAgE;AAC9D,UAAM,IAAIW,SAAJ,CAAc,8CAAd,CAAN;AACD;;AAED,MAAI,CAACJ,MAAL,EAAa;AACX,UAAM,6BAAmB,qBAAnB,CAAN;AACD;;AAED,QAAMO,OAAO,wBAAY;AACvBP;AADuB,GAAZ,CAAb;;AAIA,QAAMQ,eAAeC,sBAAsBF,IAAtB,CAArB;;AAEA,SAAO,sBAAOd,SAAP,EAAkB,EAACI,KAAKF,MAAN,EAAlB,EACJe,IADI,CACCC,SAAS;AACbR,UAAM,iBAAN,EAAyBQ,MAAMC,MAA/B;;AAEA,WAAO,oBAAKD,KAAL,EAAYH,YAAZ,EAA0B,EAACK,aAAaf,kBAAd,EAA1B,CAAP;AACD,GALI,EAMJY,IANI,CAMCI,WAAW;AACfX,UAAM,aAAN,EAAqBW,OAArB;;AAEA,WAAO,sBAAEA,OAAF,EACJC,OADI,CACI,OADJ,EAEJC,SAFI,CAEM,CAACC,KAAD,EAAQC,GAAR,KAAgBA,QAAQ,WAAR,GAAsB,iBAAEC,GAAF,CAAMF,KAAN,EAAa,OAAb,CAAtB,GAA8CA,KAFpE,EAGJA,KAHI,EAAP;AAID,GAbI,CAAP;AAcD,C;;QAEeG,O,GAAAA,O;;AA/FhB;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;AAEA,MAAMnB,SAAS,wCAAf;;AAEA,MAAME,QAAQ,qBAAY,WAAZ,CAAd;;AAEA,MAAMM,wBAAwBF,QAAQc,QAAQ;AAC5C,QAAMC,YAAY;AAChBC,UAAMF,IADU;AAEhBG,UAAM,0BAAW,oBAASH,IAAT,CAAX;AAFU,GAAlB;;AAKA,SAAOd,KAAKkB,IAAL,CAAU,EAACC,OAAOJ,UAAUE,IAAlB,EAAV,EACJd,IADI,CACCiB,QAAQ;AACZ,QAAI,CAACA,IAAD,IAASA,KAAKC,QAAL,KAAkB,OAA/B,EAAwC;AACtC,YAAMC,MAAM,6BAAmB,iBAAnB,CAAZ;;AAEAA,UAAIC,IAAJ,GAAW,UAAX;;AAEA,aAAOC,QAAQC,MAAR,CAAeH,GAAf,CAAP;AACD;;AAED,WAAO;AACLI,aAAO,WADF;AAELhB,0BACKK,SADL;AAEEK;AAFF;AAFK,KAAP;AAOD,GAjBI,EAkBJO,KAlBI,CAkBEL,QAAQ;AACbI,WAAO,QADM;AAEbhB,WAAOK,SAFM;AAGba,YAAQN;AAHK,GAAR,CAlBF,CAAP;AAuBD,CA7BD;;AA+BA,MAAMnC,eAAe,CAAE,SAAQ,0BAAgB0C,IAAhB,CAAqB,GAArB,CAA0B,GAApC,EAAwC,6CAAxC,CAArB;AACA,MAAMrC,8BAA8B,EAApC;;AA+CO,SAASqB,OAAT,CAAkB,EAACpB,MAAD,EAAlB,EAA4B;AACjCC,SAAOoC,GAAP,CAAW,QAAX,EAAqBrC,MAArB;AACD","file":"index.js","sourcesContent":["import {basename} from 'path';\nimport _ from 'lodash';\nimport debugModule from 'debug';\nimport globby from 'globby';\nimport videoExtensions from 'video-extensions';\nimport movieTitle from 'movie-title';\nimport OmdbApi from 'omdb-api-pt';\nimport pMap from 'p-map';\nimport Configstore from 'configstore';\nimport {name} from '../package.json';\nimport MovieListError from './movie-list-error';\n\nconst config = new Configstore(name);\n\nconst debug = debugModule('movieList');\n\nconst createMovieDataGetter = omdb => file => {\n  const movieInfo = {\n    path: file,\n    name: movieTitle(basename(file))\n  };\n\n  return omdb.byId({title: movieInfo.name})\n    .then(info => {\n      if (!info || info.Response === 'False') {\n        const err = new MovieListError('Movie not found');\n\n        err.code = 'ENOMOVIE';\n\n        return Promise.reject(err);\n      }\n\n      return {\n        state: 'succeeded',\n        value: {\n          ...movieInfo,\n          info\n        }\n      };\n    })\n    .catch(err => ({\n      state: 'failed',\n      value: movieInfo,\n      reason: err\n    }));\n};\n\nconst DEFAULT_GLOB = [`**/*.{${videoExtensions.join(',')}}`, '!**/*{sample,Sample,rarbg.com,RARBG.com}*.*'];\nconst DEFAULT_CONCURRENT_REQUESTS = 15;\n\nexport default function ({movieGlob = DEFAULT_GLOB, source = process.cwd(), concurrentRequests = DEFAULT_CONCURRENT_REQUESTS, apiKey = config.get('apiKey')} = {}) {\n  debug('resolved options: %j', {\n    movieGlob,\n    source,\n    concurrentRequests\n  });\n\n  if (typeof concurrentRequests !== 'number') {\n    throw new TypeError('concurrentRequests must be a number');\n  }\n\n  if (typeof source !== 'string') {\n    throw new TypeError('source must be a string');\n  }\n\n  if (typeof movieGlob !== 'string' && !Array.isArray(movieGlob)) {\n    throw new TypeError('movieGlob must be a string or a string array');\n  }\n\n  if (!apiKey) {\n    throw new MovieListError('No api key provided');\n  }\n\n  const omdb = new OmdbApi({\n    apiKey\n  });\n\n  const getMovieData = createMovieDataGetter(omdb);\n\n  return globby(movieGlob, {cwd: source})\n    .then(files => {\n      debug('files found: %d', files.length);\n\n      return pMap(files, getMovieData, {concurrency: concurrentRequests});\n    })\n    .then(results => {\n      debug('results: %j', results);\n\n      return _(results)\n        .groupBy('state')\n        .mapValues((value, key) => key === 'succeeded' ? _.map(value, 'value') : value)\n        .value();\n    });\n}\n\nexport function saveKey ({apiKey}) {\n  config.set('apiKey', apiKey);\n}"]}