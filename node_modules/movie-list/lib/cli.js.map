{"version":3,"sources":["../src/cli.js"],"names":["notifier","pkg","version","description","argument","process","cwd","option","action","path","sort","order","table","json","logger","source","then","listData","info","JSON","stringify","succeeded","sortMap","title","year","rating","runtime","length","a","b","orderIndicator","prop","property","responseA","responseB","succeededTable","head","style","forEach","output","cyan","Title","Year","yellow","imdbRating","green","Genre","red","Runtime","push","toString","failed","failedTable","value","reason","name","notify","catch","err","message","console","error","command","key","options","apiKey","argv","parse"],"mappings":"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","file":"cli.js","sourcesContent":["import {isError} from 'util';\nimport program from 'caporal';\nimport chalk from 'chalk';\nimport _ from 'lodash';\nimport Table from 'cli-table2';\nimport updateNotifier from 'update-notifier';\nimport pkg from '../package.json';\nimport movieList, {saveKey} from '.';\n\nconst notifier = updateNotifier({pkg});\n\nprogram.version(pkg.version)\n  .description(pkg.description)\n  .argument('[path]', 'Path to movies directory', null, process.cwd())\n  .option('-s, --sort <property>', 'Sort by property (title|year|rating|runtime)', ['title', 'year', 'rating', 'runtime'], 'rating')\n  .option('-o, --order <asc|desc>', 'Order of the sorting', ['asc', 'desc'], 'desc')\n  .option('-t, --table', 'Prints the list in a table')\n  .option('-j, --json', 'Prints the list data as json')\n  .action(({path}, {sort, order, table, json}, logger) => movieList({source: path})\n    .then(listData => {\n      if (json) {\n        logger.info(JSON.stringify(listData));\n\n        return;\n      }\n\n      if (listData.succeeded) {\n        const sortMap = {\n          title: 'Title',\n          year: 'Year',\n          rating: 'imdbRating',\n          runtime: 'Runtime'\n        };\n\n        logger.info(`Succeeded: ${listData.succeeded.length}`);\n        listData.succeeded.sort((a, b) => {\n          const orderIndicator = order === 'asc' ? 1 : -1;\n          const prop = _.property(sortMap[sort]);\n\n          const responseA = prop(a.info);\n          const responseB = prop(b.info);\n\n          return responseA > responseB ? orderIndicator : -orderIndicator;\n        });\n\n        const succeededTable = new Table({\n          head: ['Title', 'Year', 'Rating', 'Genres', 'Runtime'],\n          style: {\n            head: []\n          }\n        });\n\n        listData.succeeded.forEach(({info}) => {\n          const output = [chalk.cyan(info.Title), info.Year, chalk.yellow(info.imdbRating), chalk.green(info.Genre), chalk.red(info.Runtime)];\n\n          if (table) {\n            succeededTable.push(output);\n          }\n          else {\n            logger.info(...output);\n          }\n        });\n\n        if (table) {\n          logger.info(succeededTable.toString());\n        }\n      }\n\n      if (listData.succeeded && listData.failed) {\n        // Space line between succeeded and failed\n        logger.info();\n      }\n\n      if (listData.failed) {\n        const failedTable = new Table({\n          head: ['Name', 'Error'],\n          style: {\n            head: []\n          }\n        });\n\n        logger.info(`Failed: ${listData.failed.length}`);\n        listData.failed.forEach(({value, reason}) => {\n          const output = [chalk.cyan(value.name), chalk.red(isError(reason) ? reason : `Error: ${reason}`)];\n\n          if (table) {\n            failedTable.push(output);\n          }\n          else {\n            logger.info(...output);\n          }\n        });\n\n        if (table) {\n          logger.info(failedTable.toString());\n        }\n      }\n\n      notifier.notify();\n    })\n    .catch(err => {\n      if (err.message === 'No api key provided') {\n        err.message += ', save a key with `movie-list key my-key`';\n      }\n\n      if (json) {\n        logger.info(JSON.stringify(isError(err) ? err : {err}));\n\n        return;\n      }\n\n      console.error(chalk.red(isError(err) ? err : `Error: ${err}`));\n    }))\n  .command('key', 'set api key to omdb')\n  .argument('<key>', 'The api key')\n  .action(({key}, options, logger) => {\n    saveKey({apiKey: key});\n    logger.info(`Saved the given key: ${key} as the api key to omdb`);\n  });\n\nexport default argv => {\n  program\n    .parse(argv);\n};"]}